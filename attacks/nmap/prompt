* You are a cybersecurity response automation expert. You are helping respond to alerts generated by a SIEM.
* The SIEM used for event management is Wazuh. The alert has been triggered by Suricata.

* The alert has been categorized as Network Scan attack. The following JSON will contain all the details of the alert:
{
  "agent": {
    "id": "004",
    "ip": "172.12.0.2",
    "name": "webserver"
  },
  "data": {
    "alert": {
      "action": "allowed",
      "category": "Detection of a Network Scan",
      "gid": "1",
      "rev": "1",
      "severity": "2",
      "signature": "SYN Scan Detected",
      "signature_id": "1000006"
    },
    "dest_ip": "172.12.0.2",
    "dest_port": "19341",
    "direction": "to_server",
    "event_type": "alert",
    "flow": {
      "bytes_toclient": "0",
      "bytes_toserver": "60",
      "dest_ip": "172.12.0.2",
      "dest_port": "19341",
      "pkts_toclient": "0",
      "pkts_toserver": "1",
      "src_ip": "192.168.1.4",
      "src_port": "60336",
      "start": "2025-08-28T18:05:37.970126+0000"
    },
    "flow_id": "507486520344287.000000",
    "in_iface": "enp0s3",
    "ip_v": "4",
    "pkt_src": "wire/pcap",
    "proto": "TCP",
    "src_ip": "192.168.1.4",
    "src_port": "60336",
    "timestamp": "2025-08-28T18:05:37.970126+0000"
  },
  "decoder": {
    "name": "json"
  },
  "full_log": "{\"timestamp\":\"2025-08-28T18:05:37.970126+0000\",\"flow_id\":507486520344287,\"in_iface\":\"enp0s3\",\"event_type\":\"alert\",\"src_ip\":\"192.168.1.4\",\"src_port\":60336,\"dest_ip\":\"172.12.0.2\",\"dest_port\":19341,\"proto\":\"TCP\",\"ip_v\":4,\"pkt_src\":\"wire/pcap\",\"alert\":{\"action\":\"allowed\",\"gid\":1,\"signature_id\":1000006,\"rev\":1,\"signature\":\"SYN Scan Detected\",\"category\":\"Detection of a Network Scan\",\"severity\":2},\"direction\":\"to_server\",\"flow\":{\"pkts_toserver\":1,\"pkts_toclient\":0,\"bytes_toserver\":60,\"bytes_toclient\":0,\"start\":\"2025-08-28T18:05:37.970126+0000\",\"src_ip\":\"192.168.1.4\",\"dest_ip\":\"172.12.0.2\",\"src_port\":60336,\"dest_port\":19341}}",
  "id": "1756404338.876006",
  "location": "/var/log/suricata/eve.json",
  "manager": {
    "name": "wazuh-server"
  },
  "rule": {
    "description": "Suricata: Alert - SYN Scan Detected",
    "firedtimes": 9,
    "groups": [
      "ids",
      "suricata"
    ],
    "id": "86682",
    "level": 10,
    "mail": false
  },
  "timestamp": "2025-08-28T18:05:38.348+0000"
}

* You have to take into account the following considerations about the underlying network. I am using the NetJSON format to provide a view of the underlying network and interconnection between devices.
    - The NetworkGraph is the following:
{
  "label": "Network topology",
  "links": [
      {
          "source": "172.12.0.2",
          "target": "172.12.0.1",
          "cost": 0
      },
      {
          "source": "192.168.1.2",
          "target": "192.168.1.1",
          "cost": 0
      },
      {
          "source": "192.168.1.3",
          "target": "192.168.1.1",
          "cost": 0
      },
      {
          "source": "192.168.1.4",
          "target": "192.168.1.1",
          "cost": 0
      },
      {
          "source": "192.168.0.2",
          "target": "192.168.0.1",
          "cost": 0
      },
      {
          "source": "192.168.0.3",
          "target": "192.168.0.1",
          "cost": 0
      }
  ],
  "metric": null,
  "nodes": [
        {
            "id": "webserver",
            "label": "servers",
            "local_addresses": [
                "172.12.0.2"
            ],
            "properties": {
                "hostname": "webserver",
                "description": "Internal web server of the organization",
                "applications": {
                    "apache2": {
                        "version": "2.4.58",
                        "endpoint": "http://172.12.0.2"
                    }
                },
                "lan": "servers",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": false
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": true,
                        "user": "ansible"
                    }
                }
            }
        },
        {
            "id": "lubh1",
            "label": "office",
            "local_addresses": [
                "192.168.1.2"
            ],
            "properties": {
                "hostname": "lubh1",
                "description": "User workstation in the organization",
                "applications": null,
                "lan": "office",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": true
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": true,
                        "user": "ansible"
                    }
                }
            }
        },
        {
            "id": "lubh2",
            "label": "office",
            "local_addresses": [
                "192.168.1.3"
            ],
            "properties": {
                "hostname": "lubh2",
                "description": "User workstation in the organization",
                "applications": null,
                "lan": "office",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": true
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": true,
                        "user": "ansible"
                    }
                }
            }
        },
        {
            "id": "lubh3",
            "label": "office",
            "local_addresses": [
                "192.168.1.4"
            ],
            "properties": {
                "hostname": "lubh3",
                "description": "User workstation in the organization",
                "applications": null,
                "lan": "office",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": true
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": true,
                        "user": "ansible"
                    }
                }
            }
        },
        {
            "id": "wazuh-server",
            "label": "admin",
            "local_addresses": [
                "192.168.0.2"
            ],
            "properties": {
                "hostname": "wazuh-server",
                "description": "Host running Wazuh Central. It's the SIEM of the network. Detects anomalies in the network and sends an http request to the api running on the ansible server to mitigate the alert.",
                "applications": {
                    "wazuh": {
                        "version": "4.11.1",
                        "endpoint": "http://192.168.0.2:14443"
                    }
                },
                "lan": "admin",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": false
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": false,
                        "user": null
                    }
                }
            }
        },
        {
            "id": "ansible-server",
            "label": "admin",
            "local_addresses": [
                "192.168.0.3"
            ],
            "properties": {
                "hostname": "ansible-server",
                "description": "Host running alert api and ansible-server. Its purpose is to receive alerts from the SIEM, process them, create an input for an LLM and apply the script that the LLM provides in response on the corresponding host via ansible.",
                "applications": {
                    "flask": {
                        "version": "3.1.0",
                        "endpoint": "http://192.168.0.3:13080"
                    },
                    "ansible": {
                        "core_version": "2.17.9",
                        "python_version": "3.12.3"
                    }
                },
                "lan": "admin",
                "os": {
                    "name": "Ubuntu",
                    "version": "24.04.2 LTS (Noble Numbat)",
                    "gui": false
                },
                "firewall": "iptables",
                "access": {
                    "ssh": true,
                    "ansible": {
                        "enabled": false,
                        "user": null
                    }
                }
            }
        }
    ],
  "protocol": "static",
  "revision": null,
  "router_id": "router1",
  "topology_id": "topology1",
  "type": "NetworkGraph",
  "version": null
}

    - The NetworkRoutes is as follows:
{
  "metric": null,
  "protocol": "static",
  "revision": null,
  "router_id": "router1",
  "routes": [
      {
          "destination": "0.0.0.0/0",
          "next": "10.0.2.2",
          "cost": 1,
          "device": "ether1"
      },
      {
          "destination": "10.0.2.0/24",
          "next": "10.0.2.2",
          "cost": 0,
          "device": "ether1"
      },
      {
          "destination": "172.12.0.0/24",
          "next": null,
          "cost": 0,
          "device": "ether2"
      },
      {
          "destination": "192.168.0.0/24",
          "next": null,
          "cost": 0,
          "device": "ether3"
      },
      {
          "destination": "192.168.1.0/24",
          "next": null,
          "cost": 0,
          "device": "ether4"
      }
  ],
  "type": "NetworkRoutes",
  "version": null
}

* Given the previous event and context, you have to generate an Ansible playbook that will run on the machine which generated the event. The playbook must consider the following:
    - Mitigate or contain the threat.
    - Be idempotent (safe to run multiple times).
    - Be written in YAML syntax and conform to Ansible standards.
    - Only perform actions relevant to the alert (no general hardening unless required).
    - Do not use Markdown. Do not include any code blocks or formatting.
    - Do not include verification steps, only the action to be executed.
    - Only IPv4 addressing is configured, not IPv6.
    - You should consider preventing future attacks. For example, if there is a SSH intrusion attack on a host on the same subnet, consider applying a change to prevent SSH traffic from this host from going to another subnet.
    - You can make modifications on the routers, not only the hosts.
    - Related to the modules:
        - Do not include any module that is not currently available in ansible, for example, fail2ban.
        - It's prefered to use builtin modules which are available on every ansible install. For example, to modify iptables, you should use ansible.builtin.iptables.
        - To execute actions in mikrotik routers, you must use community.routeros.command module.
    - Related to the "hosts" parameter in the ansible playbook:
        - If the change is going to be made on a host, you can use the hostname from the generated alert.
        - If the change is going to be made on a router, you should get the id from the "router_id" in the Network Graph.

**Do NOT include any explanation or text before or after the playbook. Output only the YAML code block**

To give an example, if an SSH attack is occurring from 192.168.56.1 to 192.168.1.3, the playbook generated would be as follows:
---
- name: Mitigate SSH Brute Force Attack
  hosts: lubh2
  become: true
  tasks:
    - name: Block the malicious IP address using iptables
      ansible.builtin.iptables:
        chain: INPUT
        source: 192.168.56.1
        protocol: tcp
        destination_port: 22
        jump: DROP
        comment: "Blocked IP due to SSH brute force attemp"
      
- name: Router configuration to block cross-subnet SSH
  hosts: router1
  connection: network_cli
  gather_facts: false
  tasks:
    - name: Add firewall rule to drop SSH traffic from attacker subnet
      community.routeros.command:
        commands:
          - /ip firewall filter add chain=forward src-address=192.168.56.1 dst-port=22 protocol=tcp action=drop comment="Drop SSH from attacker"